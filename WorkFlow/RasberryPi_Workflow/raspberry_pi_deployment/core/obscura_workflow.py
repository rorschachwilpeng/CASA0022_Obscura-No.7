#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Obscura No.7 Complete Workflow - Laptop Version
Based on TASK1.5 experience, using real APIs for complete end-to-end process
"""

import json
import time
import random
import math
from datetime import datetime, timedelta
from .coordinate_calculator import CoordinateCalculator
from .weather_client import WeatherClient
from .cloud_api_client import CloudAPIClient
from .progress_display import ProgressDisplay
from .config_manager import ConfigManager

class ObscuraWorkflow:
    def __init__(self, config_path='config.json'):
        """Initialize Obscura Workflow"""
        print("üî≠ Initializing Obscura No.7 Virtual Telescope...")
        
        # Load configuration
        self.config_manager = ConfigManager(config_path)
        self.config = self.config_manager.get_config()
        
        # Initialize core components
        base_location = self.config.get('telescope_settings', {}).get('base_location', {})
        base_lat = base_location.get('latitude', 51.5074)
        base_lon = base_location.get('longitude', -0.1278)
        
        self.coordinate_calc = CoordinateCalculator(self.config)
        
        # Initialize Open-Meteo client (no API key required)
        from .open_meteo_client import OpenMeteoClient
        self.weather_client = OpenMeteoClient()
        print("üå§Ô∏è Open-Meteo client initialized (ÂÖçË¥πAPIÔºåÊó†ÈúÄÂØÜÈí•)")
        
        self.cloud_client = CloudAPIClient(self.config)
        self.progress = ProgressDisplay()
        
        # Workflow state
        self.last_result = None
        self.session_data = {
            'start_time': datetime.now(),
            'workflow_id': f"workflow_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            'results': []
        }
    
    def simulate_hardware_input(self) -> dict:
        """Ê®°ÊãüÁ°¨‰ª∂ËæìÂÖ•ÔºàÁ¨îËÆ∞Êú¨ÁâàÊú¨Ôºâ"""
        print("\nüéÆ Ê®°ÊãüÁ°¨‰ª∂ËæìÂÖ•...")
        print("=" * 50)
        
        # Âü∫‰∫éTASK1.5ÁöÑÊ®°ÊãüÂô®ÈÄªËæë
        distance_range = self.config.get('telescope_settings', {}).get('distance_range', {})
        min_km = distance_range.get('min_km', 1)
        max_km = distance_range.get('max_km', 50)
        
        # ÈöèÊú∫ÁîüÊàêÊàñËÄÖÂÖÅËÆ∏Áî®Êà∑ËæìÂÖ•
        use_random = input("‰ΩøÁî®ÈöèÊú∫ÂèÇÊï∞? (y/nÔºåÈªòËÆ§y): ").strip().lower()
        
        if use_random != 'n':
            # ÈöèÊú∫ÁîüÊàêÂèÇÊï∞
            distance_km = random.uniform(min_km, max_km)
            direction_deg = random.uniform(0, 360)
            time_offset_years = random.uniform(0, 10)
            print(f"üé≤ ÈöèÊú∫ÁîüÊàêÂèÇÊï∞:")
        else:
            # Áî®Êà∑ËæìÂÖ•ÂèÇÊï∞
            try:
                distance_km = float(input(f"Ë∑ùÁ¶ª (km, {min_km}-{max_km}): ").strip())
                direction_deg = float(input("ÊñπÂêë (Â∫¶, 0-360): ").strip())
                time_offset_years = float(input("Êó∂Èó¥ÂÅèÁßª (Âπ¥, 0-50): ").strip())
                print(f"üë§ Áî®Êà∑ËæìÂÖ•ÂèÇÊï∞:")
            except ValueError:
                print("‚ùå ËæìÂÖ•Êó†ÊïàÔºå‰ΩøÁî®ÈªòËÆ§ÂÄº")
                distance_km = 10.0
                direction_deg = 90.0
                time_offset_years = 5.0
        
        # È™åËØÅÂíåÈôêÂà∂ÂèÇÊï∞
        distance_km = max(min_km, min(max_km, distance_km))
        direction_deg = direction_deg % 360
        time_offset_years = max(0, min(50, time_offset_years))
        
        hardware_data = {
            'distance_km': distance_km,
            'direction_degrees': direction_deg,
            'time_offset_years': time_offset_years,
            'timestamp': datetime.now().isoformat()
        }
        
        print(f"   üìè Distance: {distance_km:.2f} km")
        print(f"   üß≠ Direction: {direction_deg:.1f}¬∞")
        print(f"   ‚è∞ Time offset: {time_offset_years:.1f} years")
        
        return hardware_data
    
    def run_complete_workflow(self) -> dict:
        """Run complete workflow"""
        workflow_steps = [
            "Hardware Data Collection",
            "Coordinate Calculation", 
            "Environmental Data Acquisition",
            "AI Art Prediction",
            "Image Generation",
            "Result Saving"
        ]
        
        self.progress.setup_workflow(workflow_steps)
        workflow_result = {}
        
        try:
            # Step 1: Hardware Data Collection
            with self.progress.start_step("Hardware Data Collection", "Simulating data reading from encoders and magnetometer") as step:
                step.update("Initializing hardware simulator...")
                hardware_data = self.simulate_hardware_input()
                step.update(f"Reading distance: {hardware_data['distance_km']:.2f}km")
                step.update(f"Reading direction: {hardware_data['direction_degrees']:.1f}¬∞")
                step.update(f"Time offset: {hardware_data['time_offset_years']:.1f} years")
                step.success("Hardware data collection completed")
                workflow_result['hardware_input'] = hardware_data
            
            # Step 2: Coordinate Calculation
            with self.progress.start_step("Coordinate Calculation", "Calculating target coordinates based on distance and direction") as step:
                step.update("Applying spherical geometry algorithm...")
                result = self.coordinate_calc.calculate_target_coordinates(
                    self.coordinate_calc.base_lat,
                    self.coordinate_calc.base_lon,
                    hardware_data['distance_km'] * 1000,  # Convert to meters
                    hardware_data['direction_degrees']
                )
                target_lat, target_lon = result['latitude'], result['longitude']
                
                coordinate_info = self.coordinate_calc.get_coordinate_info(target_lat, target_lon)
                
                self.progress.show_coordinates(
                    target_lat, target_lon, 
                    hardware_data['distance_km'] * 1000, 
                    hardware_data['direction_degrees']
                )
                step.success("Coordinate calculation completed")
                workflow_result['coordinates'] = {
                    'latitude': target_lat,
                    'longitude': target_lon,
                    'info': coordinate_info
                }
            
            # Step 3: Environmental Data Acquisition
            with self.progress.start_step("Environmental Data Acquisition", "Calling Open-Meteo API to get real environmental data") as step:
                if self.weather_client:
                    step.update("Connecting to Open-Meteo API...")
                    weather_data = self.weather_client.get_current_environmental_data(target_lat, target_lon)
                    
                    if weather_data:
                        self.progress.show_weather_summary(weather_data)
                        step.success("Real environmental data acquisition completed")
                    else:
                        step.warning("API request failed, using fallback weather data")
                        weather_data = self._create_fallback_weather_data(target_lat, target_lon)
                else:
                    step.update("Using simulated weather data...")
                    weather_data = self._create_fallback_weather_data(target_lat, target_lon)
                    step.warning("Using simulated environmental data (API client not available)")
                
                workflow_result['weather_data'] = weather_data
            
            # Step 4: AI Art Prediction
            with self.progress.start_step("AI Art Prediction", "Using machine learning model to predict art style") as step:
                step.update("Preparing environmental feature data...")
                
                # Format ML input features - Fix None value handling
                ml_features = None
                if weather_data and self.weather_client:
                    ml_features = self.weather_client.format_for_ml_model(weather_data)
                
                # If weather data is invalid or formatting failed, use fallback data
                if not ml_features:
                    step.update("Weather data invalid, using simulated data...")
                    ml_features = self._create_mock_ml_features(workflow_result)
                
                step.update("Calling AI prediction API...")
                style_prediction = self.cloud_client.predict_art_style(
                    ml_features, 
                    coordinate_info
                )
                
                self.progress.show_ml_prediction(style_prediction)
                step.success("AI art prediction completed")
                workflow_result['style_prediction'] = style_prediction
            
            # Step 5: Image Generation  
            with self.progress.start_step("Image Generation", "Using AI to generate artwork") as step:
                step.update("Building art prompt...")
                step.update("Calling image generation API...")
                
                # Show progress bar simulation
                for i in range(11):
                    self.progress.show_progress_bar(i, 10, "Generation Progress")
                    time.sleep(0.2)
                
                image_path = self.cloud_client.generate_artwork(
                    style_prediction,
                    weather_data,
                    coordinate_info
                )
                
                if image_path:
                    step.success(f"Image generation completed: {image_path}")
                    workflow_result['generated_image'] = image_path
                else:
                    step.error("Image generation failed")
                    workflow_result['generated_image'] = None
            
            # Ê≠•È™§6: ÁªìÊûú‰øùÂ≠ò
            with self.progress.start_step("ÁªìÊûú‰øùÂ≠ò", "‰øùÂ≠òÂ∑•‰ΩúÊµÅÁªìÊûúÂíåÂÖÉÊï∞ÊçÆ") as step:
                step.update("ÂáÜÂ§áÂÖÉÊï∞ÊçÆ...")
                
                # ‰øùÂ≠òÂÆåÊï¥ÁªìÊûú
                final_result = {
                    'workflow_id': self.session_data['workflow_id'],
                    'timestamp': datetime.now().isoformat(),
                    'execution_time': (datetime.now() - self.session_data['start_time']).total_seconds(),
                    'success': True,
                    'data': workflow_result
                }
                
                # ‰øùÂ≠òÂà∞Êñá‰ª∂
                result_file = f"./workflow_outputs/workflow_result_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                import os
                os.makedirs('./workflow_outputs', exist_ok=True)
                
                with open(result_file, 'w', encoding='utf-8') as f:
                    json.dump(final_result, f, indent=2, ensure_ascii=False, default=str)
                
                step.update(f"ÁªìÊûúÂ∑≤‰øùÂ≠òÂà∞: {result_file}")
                
                # Â∞ùËØï‰∏ä‰º†Âà∞ÁΩëÁ´ôÔºàÂ¶ÇÊûúÈÖçÁΩÆ‰∫ÜÔºâ
                if workflow_result.get('generated_image'):
                    step.update("Â∞ùËØï‰∏ä‰º†Âà∞Â±ïÁ§∫ÁΩëÁ´ô...")
                    
                    # ÊûÑÂª∫ÈÄÇÂêàAPIÁöÑ‰∏ä‰º†ÂÖÉÊï∞ÊçÆ
                    upload_metadata = {
                        'coordinates': workflow_result.get('coordinates', {}),
                        'weather': workflow_result.get('weather_data', {}),
                        'style': workflow_result.get('style_prediction', {}),
                        'timestamp': workflow_result.get('timestamp'),
                        'workflow_id': final_result.get('workflow_id'),
                        'source': 'obscura_telescope_workflow'
                    }
                    
                    upload_result = self.cloud_client.upload_to_website(
                        workflow_result['generated_image'],
                        upload_metadata
                    )
                    if upload_result and upload_result.get('success'):
                        final_result['upload_result'] = upload_result
                        step.update("ÁΩëÁ´ô‰∏ä‰º†ÊàêÂäü")
                    else:
                        step.warning("ÁΩëÁ´ô‰∏ä‰º†Â§±Ë¥•ÔºàËøôÊòØÊ≠£Â∏∏ÁöÑÔºåÂ¶ÇÊûúÊú¨Âú∞Ê≤°ÊúâËøêË°åÁΩëÁ´ôÔºâ")
                
                step.success("Â∑•‰ΩúÊµÅÁªìÊûú‰øùÂ≠òÂÆåÊàê")
                self.last_result = final_result
            
            # ÂÆåÊàêÂ∑•‰ΩúÊµÅ
            self.progress.complete_workflow(success=True)
            return final_result
            
        except Exception as e:
            self.progress.show_error("Â∑•‰ΩúÊµÅÊâßË°åÂ§±Ë¥•", str(e))
            self.progress.complete_workflow(success=False)
            
            error_result = {
                'workflow_id': self.session_data['workflow_id'],
                'timestamp': datetime.now().isoformat(),
                'success': False,
                'error': str(e),
                'partial_data': workflow_result
            }
            return error_result
    
    def run_batch_workflow(self, num_iterations=3):
        """ËøêË°åÊâπÈáèÂ∑•‰ΩúÊµÅÊµãËØï"""
        print(f"\nüöÄ ÂºÄÂßãÊâπÈáèÂ∑•‰ΩúÊµÅÊµãËØï ({num_iterations} Ê¨°Ëø≠‰ª£)")
        print("=" * 60)
        
        batch_results = []
        
        for i in range(num_iterations):
            print(f"\nüîÑ Á¨¨ {i+1}/{num_iterations} Ê¨°Ëø≠‰ª£")
            print("-" * 40)
            
            result = self.run_complete_workflow()
            batch_results.append(result)
            
            if i < num_iterations - 1:
                print("\n‚è±Ô∏è Á≠âÂæÖ3ÁßíÂêéÂºÄÂßã‰∏ã‰∏ÄÊ¨°Ëø≠‰ª£...")
                time.sleep(3)
        
        # ÊâπÈáèÁªìÊûúÁªüËÆ°
        successful = sum(1 for r in batch_results if r.get('success', False))
        print(f"\nüìä ÊâπÈáèÊµãËØïÂÆåÊàê: {successful}/{num_iterations} ÊàêÂäü")
        
        return batch_results
    
    def _create_fallback_weather_data(self, lat, lon):
        """ÂàõÂª∫Â§áÁî®Â§©Ê∞îÊï∞ÊçÆ"""
        import random
        
        return {
            'coordinates': {'lat': lat, 'lon': lon},
            'timestamp': datetime.now().isoformat(),
            'current_weather': {
                'temperature': 15.0 + random.uniform(-5, 15),
                'feels_like': 15.0 + random.uniform(-5, 15),
                'humidity': random.randint(40, 80),
                'pressure': random.randint(990, 1030),
                'wind_speed': random.uniform(0, 10),
                'wind_direction': random.randint(0, 360),
                'visibility': random.uniform(5, 15),
                'cloud_cover': random.randint(0, 100),
                'weather_main': random.choice(['Clear', 'Clouds', 'Rain']),
                'weather_description': random.choice(['Êô¥Êúó', 'Â§ö‰∫ë', 'Â∞èÈõ®']),
                'weather_id': random.choice([800, 801, 500]),  # Clear, Few clouds, Light rain
                'location_name': 'Ê®°Êãü‰ΩçÁΩÆ',
                'country': 'UK'
            },
            'forecast': {
                'daily': [{
                    'temperature_max': 20.0 + random.uniform(-5, 10),
                    'temperature_min': 10.0 + random.uniform(-5, 10),
                    'humidity': random.randint(40, 80),
                    'pressure': random.randint(990, 1030)
                } for _ in range(5)]
            },
            'air_quality': {
                'aqi': random.randint(1, 3),
                'aqi_description': random.choice(['‰ºòÁßÄ', 'ËâØÂ•Ω', '‰∏≠Á≠â']),
                'pm2_5': random.randint(5, 25),
                'pm10': random.randint(10, 50),
                'no2': random.randint(10, 40),
                'o3': random.randint(40, 100)
            },
            'data_quality': {
                'score': 60,
                'level': 'simulated',
                'issues': ['‰ΩøÁî®Ê®°ÊãüÊï∞ÊçÆ - APIË∞ÉÁî®Â§±Ë¥•']
            }
        }
    
    def _create_mock_ml_features(self, workflow_data):
        """ÂàõÂª∫Ê®°ÊãüMLÁâπÂæÅ"""
        # ÂÆâÂÖ®Âú∞Ëé∑ÂèñÂùêÊ†áÊï∞ÊçÆ
        coords = workflow_data.get('coordinates', {}) if workflow_data else {}
        
        # ÂÆâÂÖ®Âú∞Ëé∑ÂèñÂ§©Ê∞îÊï∞ÊçÆ
        weather_data = workflow_data.get('weather_data') if workflow_data else None
        weather = {}
        if weather_data and weather_data.get('current_weather'):
            weather = weather_data['current_weather']
        
        return {
            # Âü∫Á°ÄÂ§©Ê∞îÁâπÂæÅ
            'temperature': weather.get('temperature', 15),
            'humidity': weather.get('humidity', 60),
            'pressure': weather.get('pressure', 1013),
            'wind_speed': weather.get('wind_speed', 5),
            'wind_direction': weather.get('wind_direction', 0),
            'visibility': weather.get('visibility', 10),
            'cloud_cover': weather.get('cloud_cover', 30),
            
            # ‰ΩçÁΩÆÁâπÂæÅ
            'latitude': coords.get('latitude', 51.5),
            'longitude': coords.get('longitude', -0.1),
            
            # Â§©Ê∞îÁä∂ÂÜµÁâπÂæÅ
            'weather_code': weather.get('weather_id', 800),
            'weather_main': weather.get('weather_main', 'Clear'),
            'is_clear': weather.get('weather_main', 'Clear') == 'Clear',
            'is_cloudy': weather.get('weather_main', '') in ['Clouds', 'Overcast'],
            'is_rainy': weather.get('weather_main', '') in ['Rain', 'Drizzle'],
            'is_stormy': weather.get('weather_main', '') in ['Thunderstorm'],
            
            # Êó∂Èó¥ÁâπÂæÅ
            'hour_of_day': datetime.now().hour,
            'day_of_year': datetime.now().timetuple().tm_yday,
            'season': 'spring',
            
            # Á©∫Ê∞îË¥®ÈáèÁâπÂæÅÔºàÊ®°ÊãüÂÄºÔºâ
            'aqi': 2,
            'pm2_5': 10,
            'pm10': 20,
            'no2': 20,
            'o3': 60,
            
            # Ë∂ãÂäøÁâπÂæÅÔºàÊ®°ÊãüÂÄºÔºâ
            'temp_trend': 0,
            'pressure_trend': 0, 
            'humidity_trend': 0
        }
    
    def show_session_summary(self):
        """ÊòæÁ§∫‰ºöËØùÊÄªÁªì"""
        if self.last_result:
            print("\nüéØ ‰ºöËØùÊÄªÁªì")
            print("=" * 50)
            print(f"üïê ÂºÄÂßãÊó∂Èó¥: {self.session_data['start_time'].strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"‚ö° ÊâßË°åÊó∂Èó¥: {self.last_result.get('execution_time', 0):.2f} Áßí")
            print(f"‚úÖ ÊàêÂäüÁä∂ÊÄÅ: {'ÊòØ' if self.last_result.get('success') else 'Âê¶'}")
            
            if self.last_result.get('data', {}).get('generated_image'):
                print(f"üé® ÁîüÊàêÂõæÂÉè: {self.last_result['data']['generated_image']}")
            
            if self.last_result.get('upload_result'):
                print(f"‚òÅÔ∏è ÁΩëÁ´ô‰∏ä‰º†: ÊàêÂäü")
        else:
            print("üìù ÂΩìÂâç‰ºöËØùÊó†ÂÆåÊàêÁöÑÂ∑•‰ΩúÊµÅ")

def main():
    """‰∏ªÂáΩÊï∞ - ‰∫§‰∫íÂºèËèúÂçï"""
    print("üî≠ Obscura No.7 ËôöÊãüÊúõËøúÈïú - Á¨îËÆ∞Êú¨ÁâàÊú¨")
    print("=" * 60)
    print("Âü∫‰∫éTASK1.5Êû∂ÊûÑÔºåÈõÜÊàêÁúüÂÆûAPIË∞ÉÁî®")
    print()
    
    # ÂàùÂßãÂåñÂ∑•‰ΩúÊµÅ
    try:
        workflow = ObscuraWorkflow()
    except Exception as e:
        print(f"‚ùå ÂàùÂßãÂåñÂ§±Ë¥•: {e}")
        return
    
    while True:
        print("\nüîß ÈÄâÊã©Êìç‰Ωú:")
        print("1. ËøêË°åÂçïÊ¨°ÂÆåÊï¥Â∑•‰ΩúÊµÅ")
        print("2. ËøêË°åÊâπÈáèÊµãËØïÂ∑•‰ΩúÊµÅ")
        print("3. Êü•Áúã‰ºöËØùÊÄªÁªì")
        print("4. ÊµãËØïÂêÑ‰∏™Ê®°Âùó")
        print("5. ÈÄÄÂá∫")
        
        choice = input("\nËØ∑ÈÄâÊã© (1-5): ").strip()
        
        if choice == '1':
            print("\nüöÄ ÂºÄÂßãÂçïÊ¨°Â∑•‰ΩúÊµÅ...")
            result = workflow.run_complete_workflow()
            
        elif choice == '2':
            try:
                num = int(input("ËæìÂÖ•Ëø≠‰ª£Ê¨°Êï∞ (ÈªòËÆ§3): ").strip() or "3")
                workflow.run_batch_workflow(num)
            except ValueError:
                print("‚ùå Êó†ÊïàËæìÂÖ•Ôºå‰ΩøÁî®ÈªòËÆ§ÂÄº")
                workflow.run_batch_workflow(3)
                
        elif choice == '3':
            workflow.show_session_summary()
            
        elif choice == '4':
            print("\nüß™ Ê®°ÂùóÊµãËØïËèúÂçï:")
            print("1. ÊµãËØïÂùêÊ†áËÆ°ÁÆó")
            print("2. ÊµãËØïÂ§©Ê∞îAPI")
            print("3. ÊµãËØïAIÈ¢ÑÊµã")
            print("4. ÊµãËØïÂõæÂÉèÁîüÊàê")
            
            test_choice = input("ÈÄâÊã©ÊµãËØï (1-4): ").strip()
            
            if test_choice == '1':
                print("üßÆ ËøêË°åÂùêÊ†áËÆ°ÁÆóÊµãËØï...")
                import subprocess
                subprocess.run(['python', 'coordinate_calculator.py'])
            elif test_choice == '2':
                print("üå§Ô∏è ËøêË°åÂ§©Ê∞îÂÆ¢Êà∑Á´ØÊµãËØï...")
                import subprocess
                subprocess.run(['python', 'weather_client.py'])
            elif test_choice == '3':
                print("ü§ñ ËøêË°å‰∫ëÁ´ØAPIÊµãËØï...")
                import subprocess
                subprocess.run(['python', 'cloud_api_client.py'])
            elif test_choice == '4':
                print("üé® ËøêË°åËøõÂ∫¶ÊòæÁ§∫ÊµãËØï...")
                import subprocess
                subprocess.run(['python', 'progress_display.py'])
                
        elif choice == '5':
            print("\nüëã ÊÑüË∞¢‰ΩøÁî® Obscura No.7!")
            workflow.show_session_summary()
            break
            
        else:
            print("‚ùå Êó†ÊïàÈÄâÊã©ÔºåËØ∑ÈáçËØï")

if __name__ == "__main__":
    main()
