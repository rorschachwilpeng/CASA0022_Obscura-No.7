/**
 * Obscura No.7 - Image Modal JavaScript
 * Ëí∏Ê±ΩÊúãÂÖãÈ£éÊ†ºÁöÑÂõæÁâáÊ®°ÊÄÅÊ°Ü‰∫§‰∫íÈÄªËæë
 */

class ImageModal {
    constructor() {
        this.modal = null;
        this.currentImageData = null;
        this.isVisible = false;
        this.keydownHandler = null;
        
        this.init();
    }

    /**
     * ÂàùÂßãÂåñÊ®°ÊÄÅÊ°Ü
     */
    init() {
        this.createModalHTML();
        this.bindEvents();
        console.log('üî≠ Image Modal initialized');
    }

    /**
     * ÂàõÂª∫Ê®°ÊÄÅÊ°ÜHTMLÁªìÊûÑ
     */
    createModalHTML() {
        const modalHTML = `
            <div id="image-modal" class="image-modal" style="display: none;" aria-hidden="true" role="dialog" aria-labelledby="modal-title">
                <!-- Ê®°ÊÄÅÊ°ÜËÉåÊôØÈÅÆÁΩ© -->
                <div class="modal-backdrop" aria-hidden="true"></div>
                
                <!-- Ëí∏Ê±ΩÊúãÂÖãÊúõËøúÈïúÈïúÂ§¥ÂÆπÂô® -->
                <div class="telescope-container" role="document">
                    <!-- Ë£ÖÈ•∞ÊÄßÈΩøËΩÆ -->
                    <div class="gear-decoration gear-top-left" aria-hidden="true">‚öôÔ∏è</div>
                    <div class="gear-decoration gear-top-right" aria-hidden="true">‚öôÔ∏è</div>
                    <div class="gear-decoration gear-bottom-left" aria-hidden="true">‚öôÔ∏è</div>
                    <div class="gear-decoration gear-bottom-right" aria-hidden="true">‚öôÔ∏è</div>
                    
                    <!-- ÈïúÂ§¥ËæπÊ°Ü -->
                    <div class="telescope-frame">
                        <!-- ÂÖ≥Èó≠ÊåâÈíÆ -->
                        <button class="modal-close" aria-label="Close modal" title="Close (ESC)">
                            <span aria-hidden="true">‚úï</span>
                        </button>
                        
                        <!-- ÂØºËà™ÊåâÈíÆ -->
                        <button class="modal-nav modal-prev" aria-label="Previous image" title="Previous image (‚Üê)">
                            <span aria-hidden="true">‚Äπ</span>
                        </button>
                        <button class="modal-nav modal-next" aria-label="Next image" title="Next image (‚Üí)">
                            <span aria-hidden="true">‚Ä∫</span>
                        </button>
                        
                        <!-- ÈïúÂ§¥ÂÜÖÂÆπÂå∫Âüü -->
                        <div class="telescope-lens">
                            <!-- ÂõæÁâáÂ±ïÁ§∫Âå∫Âüü -->
                            <div class="image-container">
                                <img id="modal-image" src="" alt="" class="modal-image" />
                                <div class="image-loading" style="display: none;">
                                    <div class="brass-spinner">
                                        <div class="gear-spinner" aria-hidden="true">‚öôÔ∏è</div>
                                    </div>
                                    <p>Loading vision...</p>
                                </div>
                            </div>
                            
                            <!-- ‰ø°ÊÅØÈù¢Êùø -->
                            <div class="info-panel">
                                <h2 id="modal-title" class="image-title">Vision Details</h2>
                                
                                <!-- È¢ÑÊµãÊ¶ÇË¶Å‰ø°ÊÅØ -->
                                <div class="prediction-summary">
                                    <div class="summary-grid">
                                        <div class="summary-item">
                                            <span class="summary-icon" aria-hidden="true">üå°Ô∏è</span>
                                            <span class="summary-label">Temperature:</span>
                                            <span id="summary-temperature" class="summary-value">--¬∞C</span>
                                        </div>
                                        <div class="summary-item">
                                            <span class="summary-icon" aria-hidden="true">üíß</span>
                                            <span class="summary-label">Humidity:</span>
                                            <span id="summary-humidity" class="summary-value">--%</span>
                                        </div>
                                        <div class="summary-item">
                                            <span class="summary-icon" aria-hidden="true">üìç</span>
                                            <span class="summary-label">Location:</span>
                                            <span id="summary-location" class="summary-value">--</span>
                                        </div>
                                        <div class="summary-item">
                                            <span class="summary-icon" aria-hidden="true">üîÆ</span>
                                            <span class="summary-label">Confidence:</span>
                                            <span id="summary-confidence" class="summary-value">--%</span>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Êó∂Èó¥‰ø°ÊÅØ -->
                                <div class="time-info">
                                    <p><strong>Generated:</strong> <span id="summary-time">--</span></p>
                                    <p><strong>AI Model:</strong> <span id="summary-model">DALL-E 3</span></p>
                                </div>
                                
                                <!-- ÂõæÁâáÊèèËø∞ -->
                                <div class="description-section">
                                    <h3>Vision Description</h3>
                                    <p id="image-description" class="image-description">Loading description...</p>
                                </div>
                                
                                <!-- Êìç‰ΩúÊåâÈíÆ -->
                                <div class="modal-actions">
                                    <button id="view-details-btn" class="detail-button">
                                        <span class="button-icon" aria-hidden="true">üîç</span>
                                        <span>Detailed Analysis</span>
                                    </button>
                                    <button id="download-btn" class="download-button">
                                        <span class="button-icon" aria-hidden="true">‚¨áÔ∏è</span>
                                        <span>Download</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Âä†ËΩΩÁä∂ÊÄÅÊåáÁ§∫Âô® -->
                <div class="modal-loading" style="display: none;">
                    <div class="loading-content">
                        <div class="brass-spinner">
                            <div class="gear-spinner" aria-hidden="true">‚öôÔ∏è</div>
                        </div>
                        <p>Accessing temporal archive...</p>
                    </div>
                </div>
            </div>
        `;
        
        // ÊèíÂÖ•Âà∞È°µÈù¢
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        this.modal = document.getElementById('image-modal');
    }

    /**
     * ÁªëÂÆö‰∫ã‰ª∂ÁõëÂê¨Âô®
     */
    bindEvents() {
        if (!this.modal) return;

        // ÂÖ≥Èó≠ÊåâÈíÆ
        const closeBtn = this.modal.querySelector('.modal-close');
        closeBtn?.addEventListener('click', () => this.hide());

        // ËÉåÊôØÁÇπÂáªÂÖ≥Èó≠
        const backdrop = this.modal.querySelector('.modal-backdrop');
        backdrop?.addEventListener('click', () => this.hide());

        // ÂØºËà™ÊåâÈíÆ
        const prevBtn = this.modal.querySelector('.modal-prev');
        const nextBtn = this.modal.querySelector('.modal-next');
        prevBtn?.addEventListener('click', () => this.navigatePrevious());
        nextBtn?.addEventListener('click', () => this.navigateNext());

        // ËØ¶ÁªÜÂàÜÊûêÊåâÈíÆ
        const detailBtn = this.modal.querySelector('#view-details-btn');
        detailBtn?.addEventListener('click', () => this.openDetailPage());

        // ‰∏ãËΩΩÊåâÈíÆ
        const downloadBtn = this.modal.querySelector('#download-btn');
        downloadBtn?.addEventListener('click', () => this.downloadImage());

        // ÈîÆÁõòÂØºËà™
        this.keydownHandler = (e) => this.handleKeydown(e);
    }

    /**
     * ÊòæÁ§∫Ê®°ÊÄÅÊ°Ü
     * @param {Object} imageData - ÂõæÁâáÊï∞ÊçÆ
     * @param {Array} galleryImages - ÁîªÂªä‰∏≠ÊâÄÊúâÂõæÁâáÔºàÁî®‰∫éÂØºËà™Ôºâ
     * @param {number} currentIndex - ÂΩìÂâçÂõæÁâáÁ¥¢Âºï
     */
    async show(imageData, galleryImages = [], currentIndex = 0) {
        if (!this.modal || !imageData) return;

        this.currentImageData = imageData;
        this.galleryImages = galleryImages;
        this.currentIndex = currentIndex;

        // ÊòæÁ§∫Âä†ËΩΩÁä∂ÊÄÅ
        this.showLoading();
        
        // ÊòæÁ§∫Ê®°ÊÄÅÊ°Ü
        this.modal.style.display = 'flex';
        this.modal.setAttribute('aria-hidden', 'false');
        this.isVisible = true;

        // Ê∑ªÂä†ÈîÆÁõòÁõëÂê¨
        document.addEventListener('keydown', this.keydownHandler);
        
        // Á¶ÅÁî®È°µÈù¢ÊªöÂä®
        document.body.style.overflow = 'hidden';

        // Ëé∑ÂèñÂÆåÊï¥ÂõæÁâáÊï∞ÊçÆ
        try {
            const fullData = await this.fetchImageData(imageData.id);
            await this.populateModal(fullData);
            this.hideLoading();
            
            // Âä®ÁîªÊïàÊûú
            requestAnimationFrame(() => {
                this.modal.classList.add('modal-visible');
            });
            
        } catch (error) {
            console.error('Error loading image data:', error);
            this.hideLoading();
            this.showError('Failed to load image details');
        }
    }

    /**
     * ÈöêËóèÊ®°ÊÄÅÊ°Ü
     */
    hide() {
        if (!this.modal || !this.isVisible) return;

        // ÁßªÈô§Âä®ÁîªÁ±ª
        this.modal.classList.remove('modal-visible');
        
        // Âª∂ËøüÈöêËóè‰ª•ÂÆåÊàêÂä®Áîª
        setTimeout(() => {
            this.modal.style.display = 'none';
            this.modal.setAttribute('aria-hidden', 'true');
            this.isVisible = false;
            
            // ÁßªÈô§ÈîÆÁõòÁõëÂê¨
            document.removeEventListener('keydown', this.keydownHandler);
            
            // ÊÅ¢Â§çÈ°µÈù¢ÊªöÂä®
            document.body.style.overflow = '';
            
            // Ê∏ÖÁêÜÊï∞ÊçÆ
            this.currentImageData = null;
            this.galleryImages = [];
            this.currentIndex = 0;
        }, 300);
    }

    /**
     * Ëé∑ÂèñÂõæÁâáËØ¶ÁªÜÊï∞ÊçÆ
     * @param {number} imageId - ÂõæÁâáID
     */
    async fetchImageData(imageId) {
        const response = await fetch(`/api/v1/images/${imageId}`);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        return await response.json();
    }

    /**
     * Â°´ÂÖÖÊ®°ÊÄÅÊ°ÜÂÜÖÂÆπ
     * @param {Object} data - ÂõæÁâáÂÆåÊï¥Êï∞ÊçÆ
     */
    async populateModal(data) {
        console.log('Populating modal with data:', data);
        
        // Â§ÑÁêÜ‰∏çÂêåÁöÑÊï∞ÊçÆÁªìÊûÑ
        const image = data.image || data;
        const prediction = data.prediction || {};

        // ËÆæÁΩÆÂõæÁâá
        const modalImage = this.modal.querySelector('#modal-image');
        if (modalImage && image.url) {
            modalImage.src = image.url;
            modalImage.alt = image.description || 'AI Generated Environmental Vision';
            
            // ÂõæÁâáÂä†ËΩΩÂ§ÑÁêÜ
            try {
                await new Promise((resolve, reject) => {
                    modalImage.onload = resolve;
                    modalImage.onerror = reject;
                    // ËÆæÁΩÆË∂ÖÊó∂
                    setTimeout(reject, 10000);
                });
            } catch (error) {
                console.warn('Image loading timeout or error:', error);
            }
        }

        // Â°´ÂÖÖÂü∫Êú¨‰ø°ÊÅØ
        const titleElement = this.modal.querySelector('#modal-title');
        if (titleElement) {
            titleElement.textContent = image.description || 'Environmental Vision';
        }
        
        // Â°´ÂÖÖÈ¢ÑÊµãÊï∞ÊçÆÔºà‰ªépredictionÊàñinput_data‰∏≠ÊèêÂèñÔºâ
        const resultData = prediction.result_data || {};
        const inputData = prediction.input_data || {};
        
        // Ê∏©Â∫¶‰ø°ÊÅØ
        const tempElement = this.modal.querySelector('#summary-temperature');
        if (tempElement) {
            const temp = resultData.temperature || inputData.temperature || prediction.temperature;
            tempElement.textContent = temp ? `${Math.round(temp)}¬∞C` : '--¬∞C';
        }
        
        // ÊπøÂ∫¶‰ø°ÊÅØ
        const humidityElement = this.modal.querySelector('#summary-humidity');
        if (humidityElement) {
            const humidity = resultData.humidity || inputData.humidity || prediction.humidity;
            humidityElement.textContent = humidity ? `${Math.round(humidity)}%` : '--%';
        }
        
        // ‰ΩçÁΩÆ‰ø°ÊÅØ
        const locationElement = this.modal.querySelector('#summary-location');
        if (locationElement) {
            const location = prediction.location || inputData.location || 'Global';
            locationElement.textContent = location;
        }
        
        // ÁΩÆ‰ø°Â∫¶‰ø°ÊÅØ
        const confidenceElement = this.modal.querySelector('#summary-confidence');
        if (confidenceElement) {
            const confidence = resultData.confidence || prediction.confidence || 0.85;
            confidenceElement.textContent = `${Math.round(confidence * 100)}%`;
        }
        
        // Êó∂Èó¥‰ø°ÊÅØ
        const timeElement = this.modal.querySelector('#summary-time');
        if (timeElement) {
            const date = new Date(image.created_at);
            timeElement.textContent = date.toLocaleString();
        }
        
        // ÊèèËø∞‰ø°ÊÅØ
        const descElement = this.modal.querySelector('#image-description');
        if (descElement) {
            descElement.textContent = image.description || 
                'A glimpse into a possible environmental future, generated by AI based on predictive environmental data.';
        }

        // Êõ¥Êñ∞ÂØºËà™ÊåâÈíÆÁä∂ÊÄÅ
        this.updateNavigationButtons();
        
        // ËÆæÁΩÆËØ¶ÁªÜÂàÜÊûêÊåâÈíÆ
        const detailBtn = this.modal.querySelector('#view-details-btn');
        if (detailBtn) {
            detailBtn.dataset.imageId = image.id;
        }
    }

    /**
     * Êõ¥Êñ∞ÂØºËà™ÊåâÈíÆÁä∂ÊÄÅ
     */
    updateNavigationButtons() {
        const prevBtn = this.modal.querySelector('.modal-prev');
        const nextBtn = this.modal.querySelector('.modal-next');
        
        if (this.galleryImages.length <= 1) {
            prevBtn.style.display = 'none';
            nextBtn.style.display = 'none';
        } else {
            prevBtn.style.display = 'block';
            nextBtn.style.display = 'block';
            
            prevBtn.disabled = this.currentIndex === 0;
            nextBtn.disabled = this.currentIndex === this.galleryImages.length - 1;
        }
    }

    /**
     * ÂØºËà™Âà∞‰∏ä‰∏ÄÂº†ÂõæÁâá
     */
    async navigatePrevious() {
        if (this.currentIndex > 0) {
            this.currentIndex--;
            const imageData = this.galleryImages[this.currentIndex];
            await this.show(imageData, this.galleryImages, this.currentIndex);
        }
    }

    /**
     * ÂØºËà™Âà∞‰∏ã‰∏ÄÂº†ÂõæÁâá
     */
    async navigateNext() {
        if (this.currentIndex < this.galleryImages.length - 1) {
            this.currentIndex++;
            const imageData = this.galleryImages[this.currentIndex];
            await this.show(imageData, this.galleryImages, this.currentIndex);
        }
    }

    /**
     * ÊâìÂºÄËØ¶ÁªÜÂàÜÊûêÈ°µÈù¢
     */
    openDetailPage() {
        if (this.currentImageData) {
            const imageId = this.currentImageData.id;
            window.location.href = `/image/${imageId}`;
        }
    }

    /**
     * ‰∏ãËΩΩÂõæÁâá
     */
    async downloadImage() {
        if (!this.currentImageData) return;

        try {
            const image = this.modal.querySelector('#modal-image');
            const link = document.createElement('a');
            link.href = image.src;
            link.download = `obscura-vision-${this.currentImageData.id}.jpg`;
            link.target = '_blank';
            link.click();
        } catch (error) {
            console.error('Download failed:', error);
        }
    }

    /**
     * Â§ÑÁêÜÈîÆÁõò‰∫ã‰ª∂
     * @param {KeyboardEvent} e - ÈîÆÁõò‰∫ã‰ª∂
     */
    handleKeydown(e) {
        if (!this.isVisible) return;

        switch (e.key) {
            case 'Escape':
                e.preventDefault();
                this.hide();
                break;
            case 'ArrowLeft':
                e.preventDefault();
                this.navigatePrevious();
                break;
            case 'ArrowRight':
                e.preventDefault();
                this.navigateNext();
                break;
            case 'Enter':
                if (e.target.classList.contains('detail-button')) {
                    e.preventDefault();
                    this.openDetailPage();
                }
                break;
        }
    }

    /**
     * ÊòæÁ§∫Âä†ËΩΩÁä∂ÊÄÅ
     */
    showLoading() {
        const loading = this.modal.querySelector('.modal-loading');
        if (loading) {
            loading.style.display = 'flex';
        }
    }

    /**
     * ÈöêËóèÂä†ËΩΩÁä∂ÊÄÅ
     */
    hideLoading() {
        const loading = this.modal.querySelector('.modal-loading');
        if (loading) {
            loading.style.display = 'none';
        }
    }

    /**
     * ÊòæÁ§∫ÈîôËØØ‰ø°ÊÅØ
     * @param {string} message - ÈîôËØØ‰ø°ÊÅØ
     */
    showError(message) {
        const description = this.modal.querySelector('#image-description');
        if (description) {
            description.textContent = `Error: ${message}`;
            description.style.color = 'var(--amber)';
        }
    }
}

// ÂÖ®Â±ÄÂÆû‰æãÂíåÁ±ª
window.ImageModal = ImageModal;
window.imageModal = null;

// È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñ
document.addEventListener('DOMContentLoaded', () => {
    window.imageModal = new ImageModal();
    
    // ‰∏∫‰∫ÜÂêëÂêéÂÖºÂÆπÔºå‰πüËÆæÁΩÆ‰∏∫ImageModal
    window.ImageModal.instance = window.imageModal;
    window.ImageModal.show = (imageData, galleryImages, currentIndex) => {
        return window.imageModal.show(imageData, galleryImages, currentIndex);
    };
});

// ÂØºÂá∫Á±ªÔºàÂ¶ÇÊûú‰ΩøÁî®Ê®°ÂùóÁ≥ªÁªüÔºâ
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ImageModal;
}
