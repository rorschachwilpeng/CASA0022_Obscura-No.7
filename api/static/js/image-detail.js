/**
 * Obscura No.7 - Image Detail Page JavaScript
 * 图片详情页的交互逻辑和数据处理
 */

class ImageDetailPage {
    constructor() {
        this.imageId = null;
        this.imageData = null;
        this.predictionData = null;
        this.relatedImages = [];
        
        this.init();
    }

    /**
     * 初始化详情页
     */
    init() {
        this.extractImageId();
        this.bindEvents();
        this.loadImageData();
        console.log('🔭 Image Detail Page initialized');
    }

    /**
     * 从URL中提取图片ID
     */
    extractImageId() {
        const path = window.location.pathname;
        const matches = path.match(/\/image\/(\d+)/);
        if (matches) {
            this.imageId = parseInt(matches[1]);
        } else {
            console.error('No image ID found in URL');
            this.showError('Invalid image URL');
        }
    }

    /**
     * 绑定事件监听器
     */
    bindEvents() {
        // 返回按钮
        const backButton = document.querySelector('.back-button');
        backButton?.addEventListener('click', () => this.goBack());

        // 下载按钮
        const downloadButton = document.querySelector('.download-button');
        downloadButton?.addEventListener('click', () => this.downloadImage());

        // 分享按钮
        const shareButton = document.querySelector('.share-button');
        shareButton?.addEventListener('click', () => this.shareImage());

        // 全屏查看按钮
        const fullscreenButton = document.querySelector('.fullscreen-button');
        fullscreenButton?.addEventListener('click', () => this.toggleFullscreen());

        // 刷新数据按钮
        const refreshButton = document.querySelector('.refresh-button');
        refreshButton?.addEventListener('click', () => this.refreshData());

        // 键盘快捷键
        document.addEventListener('keydown', (e) => this.handleKeydown(e));

        // 图片懒加载
        this.initializeLazyLoading();

        // 窗口大小改变时重新调整图表
        window.addEventListener('resize', () => this.resizeCharts());
    }

    /**
     * 加载图片数据
     */
    async loadImageData() {
        if (!this.imageId) return;

        try {
            this.showLoading();

            // 并行加载多个数据源
            const [imageResponse, relatedResponse] = await Promise.all([
                fetch(`/api/v1/images/${this.imageId}`),
                fetch(`/api/v1/images/${this.imageId}/related`)
            ]);

            if (!imageResponse.ok) {
                throw new Error(`Failed to load image: ${imageResponse.status}`);
            }

            const imageData = await imageResponse.json();
            this.imageData = imageData.image;
            this.predictionData = imageData.prediction;

            // 相关图片可能不存在，不强制要求
            if (relatedResponse.ok) {
                const relatedData = await relatedResponse.json();
                this.relatedImages = relatedData.images || [];
            }

            await this.populatePageContent();
            this.hideLoading();

        } catch (error) {
            console.error('Error loading image data:', error);
            this.hideLoading();
            this.showError('Failed to load image details');
        }
    }

    /**
     * 填充页面内容
     */
    async populatePageContent() {
        if (!this.imageData) return;

        // 更新页面标题
        document.title = `${this.imageData.description || 'Environmental Vision'} - Obscura No.7`;

        // 填充基本信息
        this.populateBasicInfo();

        // 填充预测数据
        this.populatePredictionData();

        // 创建数据可视化
        await this.createDataVisualizations();

        // 填充相关图片
        this.populateRelatedImages();

        // 更新分享数据
        this.updateShareData();
    }

    /**
     * 填充基本信息
     */
    populateBasicInfo() {
        // 主图片
        const mainImage = document.querySelector('#main-image');
        if (mainImage && this.imageData.url) {
            mainImage.src = this.imageData.url;
            mainImage.alt = this.imageData.description || 'AI Generated Environmental Vision';
        }

        // 图片描述
        const description = document.querySelector('#image-description');
        if (description) {
            description.textContent = this.imageData.description || 
                'A glimpse into a possible environmental future, generated by AI based on predictive environmental data.';
        }

        // 创建时间
        const createdTime = document.querySelector('#created-time');
        if (createdTime && this.imageData.created_at) {
            const date = new Date(this.imageData.created_at);
            createdTime.textContent = date.toLocaleString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        // 图片ID
        const imageId = document.querySelector('#image-id');
        if (imageId) {
            imageId.textContent = `#${this.imageData.id}`;
        }
    }

    /**
     * 填充预测数据
     */
    populatePredictionData() {
        if (!this.predictionData) return;

        // 环境参数
        const envData = [
            { key: 'temperature', label: 'Temperature', unit: '°C', icon: '🌡️' },
            { key: 'humidity', label: 'Humidity', unit: '%', icon: '💧' },
            { key: 'pressure', label: 'Pressure', unit: 'hPa', icon: '🌀' },
            { key: 'wind_speed', label: 'Wind Speed', unit: 'm/s', icon: '💨' },
            { key: 'visibility', label: 'Visibility', unit: 'km', icon: '👁️' }
        ];

        const envContainer = document.querySelector('#environment-data');
        if (envContainer) {
            envContainer.innerHTML = '';
            
            envData.forEach(item => {
                const value = this.predictionData[item.key];
                if (value !== undefined && value !== null) {
                    const envItem = document.createElement('div');
                    envItem.className = 'env-data-item';
                    envItem.innerHTML = `
                        <div class="env-icon">${item.icon}</div>
                        <div class="env-content">
                            <div class="env-label">${item.label}</div>
                            <div class="env-value">${value}${item.unit}</div>
                        </div>
                    `;
                    envContainer.appendChild(envItem);
                }
            });
        }

        // 位置信息
        const location = document.querySelector('#prediction-location');
        if (location && this.predictionData.location) {
            location.textContent = this.predictionData.location;
        }

        // 置信度
        const confidence = document.querySelector('#prediction-confidence');
        if (confidence && this.predictionData.confidence) {
            const confidencePercent = Math.round(this.predictionData.confidence * 100);
            confidence.textContent = `${confidencePercent}%`;
            
            // 添加置信度颜色
            const confidenceBar = document.querySelector('#confidence-bar');
            if (confidenceBar) {
                confidenceBar.style.width = `${confidencePercent}%`;
                if (confidencePercent >= 80) {
                    confidenceBar.className = 'confidence-bar high';
                } else if (confidencePercent >= 60) {
                    confidenceBar.className = 'confidence-bar medium';
                } else {
                    confidenceBar.className = 'confidence-bar low';
                }
            }
        }
    }

    /**
     * 创建数据可视化
     */
    async createDataVisualizations() {
        if (!window.dataVisualization) {
            console.warn('Data visualization module not loaded');
            return;
        }

        try {
            // 环境趋势图表
            await window.dataVisualization.createEnvironmentTrendChart(
                '#env-trend-chart',
                this.predictionData
            );

            // 预测准确度图表
            await window.dataVisualization.createConfidenceChart(
                '#confidence-chart',
                this.predictionData
            );

            // ML处理流程图
            await window.dataVisualization.createProcessFlowChart(
                '#process-flow-chart',
                this.predictionData
            );

        } catch (error) {
            console.error('Error creating visualizations:', error);
        }
    }

    /**
     * 填充相关图片
     */
    populateRelatedImages() {
        const relatedContainer = document.querySelector('#related-images');
        if (!relatedContainer || this.relatedImages.length === 0) {
            // 隐藏相关图片部分
            const relatedSection = document.querySelector('.related-section');
            if (relatedSection) {
                relatedSection.style.display = 'none';
            }
            return;
        }

        relatedContainer.innerHTML = '';
        
        this.relatedImages.forEach(image => {
            const imageItem = document.createElement('div');
            imageItem.className = 'related-image-item';
            imageItem.innerHTML = `
                <a href="/image/${image.id}" class="related-image-link">
                    <img src="${image.thumbnail_url || image.url}" 
                         alt="${image.description || 'Related vision'}"
                         loading="lazy"
                         class="related-image">
                    <div class="related-image-overlay">
                        <div class="related-image-title">${image.description || 'Environmental Vision'}</div>
                        <div class="related-image-time">${new Date(image.created_at).toLocaleDateString()}</div>
                    </div>
                </a>
            `;
            relatedContainer.appendChild(imageItem);
        });
    }

    /**
     * 更新分享数据
     */
    updateShareData() {
        if (!this.imageData) return;

        // 更新Open Graph meta标签
        this.updateMetaTag('og:title', this.imageData.description || 'Environmental Vision - Obscura No.7');
        this.updateMetaTag('og:description', 'AI-generated vision of environmental future based on predictive data');
        this.updateMetaTag('og:image', this.imageData.url);
        this.updateMetaTag('og:url', window.location.href);

        // 更新Twitter Card meta标签
        this.updateMetaTag('twitter:title', this.imageData.description || 'Environmental Vision');
        this.updateMetaTag('twitter:description', 'AI-generated environmental prediction visualization');
        this.updateMetaTag('twitter:image', this.imageData.url);
    }

    /**
     * 更新meta标签
     */
    updateMetaTag(property, content) {
        let meta = document.querySelector(`meta[property="${property}"]`) || 
                   document.querySelector(`meta[name="${property}"]`);
        
        if (!meta) {
            meta = document.createElement('meta');
            meta.setAttribute(property.startsWith('og:') ? 'property' : 'name', property);
            document.head.appendChild(meta);
        }
        
        meta.setAttribute('content', content);
    }

    /**
     * 返回上一页
     */
    goBack() {
        if (window.history.length > 1) {
            window.history.back();
        } else {
            window.location.href = '/gallery';
        }
    }

    /**
     * 下载图片
     */
    async downloadImage() {
        if (!this.imageData) return;

        try {
            const link = document.createElement('a');
            link.href = this.imageData.url;
            link.download = `obscura-vision-${this.imageData.id}-detailed.jpg`;
            link.target = '_blank';
            link.click();

            // 显示下载成功提示
            this.showNotification('Image download started', 'success');
        } catch (error) {
            console.error('Download failed:', error);
            this.showNotification('Download failed', 'error');
        }
    }

    /**
     * 分享图片
     */
    async shareImage() {
        if (!this.imageData) return;

        const shareData = {
            title: this.imageData.description || 'Environmental Vision - Obscura No.7',
            text: 'Check out this AI-generated environmental prediction!',
            url: window.location.href
        };

        try {
            if (navigator.share) {
                await navigator.share(shareData);
            } else {
                // 备用方案：复制链接到剪贴板
                await navigator.clipboard.writeText(window.location.href);
                this.showNotification('Link copied to clipboard', 'success');
            }
        } catch (error) {
            console.error('Share failed:', error);
            this.showNotification('Share failed', 'error');
        }
    }

    /**
     * 切换全屏模式
     */
    toggleFullscreen() {
        const mainImage = document.querySelector('#main-image');
        if (!mainImage) return;

        if (!document.fullscreenElement) {
            mainImage.requestFullscreen().catch(err => {
                console.error('Fullscreen failed:', err);
            });
        } else {
            document.exitFullscreen();
        }
    }

    /**
     * 刷新数据
     */
    async refreshData() {
        const refreshButton = document.querySelector('.refresh-button');
        if (refreshButton) {
            refreshButton.disabled = true;
            refreshButton.innerHTML = '<span>🔄</span> Refreshing...';
        }

        try {
            await this.loadImageData();
            this.showNotification('Data refreshed successfully', 'success');
        } catch (error) {
            this.showNotification('Failed to refresh data', 'error');
        } finally {
            if (refreshButton) {
                refreshButton.disabled = false;
                refreshButton.innerHTML = '<span>🔄</span> Refresh';
            }
        }
    }

    /**
     * 处理键盘快捷键
     */
    handleKeydown(e) {
        switch (e.key) {
            case 'Escape':
                if (document.fullscreenElement) {
                    document.exitFullscreen();
                } else {
                    this.goBack();
                }
                break;
            case 'f':
            case 'F':
                if (e.ctrlKey || e.metaKey) {
                    e.preventDefault();
                    this.toggleFullscreen();
                }
                break;
            case 'd':
            case 'D':
                if (e.ctrlKey || e.metaKey) {
                    e.preventDefault();
                    this.downloadImage();
                }
                break;
            case 's':
            case 'S':
                if (e.ctrlKey || e.metaKey) {
                    e.preventDefault();
                    this.shareImage();
                }
                break;
        }
    }

    /**
     * 初始化懒加载
     */
    initializeLazyLoading() {
        const images = document.querySelectorAll('img[loading="lazy"]');
        
        if ('IntersectionObserver' in window) {
            const imageObserver = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        if (img.dataset.src) {
                            img.src = img.dataset.src;
                            img.removeAttribute('data-src');
                        }
                        imageObserver.unobserve(img);
                    }
                });
            });

            images.forEach(img => imageObserver.observe(img));
        }
    }

    /**
     * 调整图表大小
     */
    resizeCharts() {
        if (window.dataVisualization) {
            window.dataVisualization.resizeAllCharts();
        }
    }

    /**
     * 显示加载状态
     */
    showLoading() {
        const loader = document.querySelector('.page-loader');
        if (loader) {
            loader.style.display = 'flex';
        }
    }

    /**
     * 隐藏加载状态
     */
    hideLoading() {
        const loader = document.querySelector('.page-loader');
        if (loader) {
            loader.style.display = 'none';
        }
    }

    /**
     * 显示错误信息
     */
    showError(message) {
        const errorContainer = document.querySelector('.error-container');
        if (errorContainer) {
            errorContainer.innerHTML = `
                <div class="error-message">
                    <span class="error-icon">⚠️</span>
                    <span>${message}</span>
                </div>
            `;
            errorContainer.style.display = 'block';
        }
    }

    /**
     * 显示通知消息
     */
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <span class="notification-message">${message}</span>
            <button class="notification-close" onclick="this.parentElement.remove()">✕</button>
        `;
        
        document.body.appendChild(notification);
        
        // 自动移除通知
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 5000);
    }
}

// 全局实例
window.imageDetailPage = null;

// 页面加载完成后初始化
document.addEventListener('DOMContentLoaded', () => {
    // 检查是否在详情页面
    if (window.location.pathname.includes('/image/')) {
        window.imageDetailPage = new ImageDetailPage();
    }
});

// 导出类（如果使用模块系统）
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ImageDetailPage;
}
